meanbeta4 = mean(beta4,na.rm=TRUE)
bias1 = meanbeta1-beta[j]
bias2 = meanbeta2-beta[j]
bias3 = meanbeta3-beta[j]
bias4 = meanbeta4-beta[j]
ubias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.975)
ubias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.975)
ubias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.975)
ubias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.975)
lbias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.025)
lbias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.025)
lbias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.025)
lbias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.025)
BIAS[[i]][j,] = c(bias1,bias2,bias3,bias4)
UBIAS[[i]][j,] = c(ubias1,ubias2,ubias3,ubias4)
LBIAS[[i]][j,] = c(lbias1,lbias2,lbias3,lbias4)
}
}
BIAS
# Create one plot for each value of A with separate bars for each value of beta
xbeta = rep(c(seq(1,4),""), 3)[-15]
betalab = beta
auclab = round(c(pnorm(A[1]*sqrt(2)/(sqrt(0.03))),pnorm(A[2]*sqrt(2)/(sqrt(0.03))),pnorm(A[3]*sqrt(2)/(sqrt(0.03)))),2)
colors = brewer.pal(4, "Dark2")
par (mfrow = c(2,2))
for (i in 1:3){
# true outcome
plot(seq(1,15,by = 5), BIAS[[i]][,1],
ylim=range(c(LBIAS), c(UBIAS)), xlim = c(0,15),
pch=19, ylab="Bias", xaxt = "n",
main=paste("AUC =",auclab[i]), xlab = "", col = colors[1])
arrows(seq(1,15,by = 5), LBIAS[[i]][,1], seq(1,15,by = 5), UBIAS[[i]][,1], length=0.05, angle=90, code=3, col = colors[1])
# dichotomized phenotype
points(seq(2,15,by = 5), BIAS[[i]][,2],pch=19, col = colors[2])
arrows(seq(2,15,by = 5), LBIAS[[i]][,2], seq(2,15,by = 5), UBIAS[[i]][,2], length=0.05, angle=90, code=3, col = colors[2])
# imperfect correction to phenotype probability
points(seq(3,15,by = 5), BIAS[[i]][,3],pch=19, col = colors[3])
arrows(seq(3,15,by = 5), LBIAS[[i]][,3], seq(3,15,by = 5), UBIAS[[i]][,3], length=0.05, angle=90, code=3, col = colors[3])
# true correction to phenotype probability
points(seq(4,15,by = 5), BIAS[[i]][,4],pch=19, col = colors[4])
arrows(seq(4,15,by = 5), LBIAS[[i]][,4], seq(4,15,by = 5), UBIAS[[i]][,4], length=0.05, angle=90, code=3, col = colors[4])
abline(h = 0)
axis(1,at = seq(1,14),labels = xbeta, cex.axis = 0.8)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[1])),side = 1, line = 2, at = 2.5)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[2])),side = 1, line = 2, at = 7.5)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[3])),side = 1, line = 2, at = 12.5)
}
shiny::runApp('Downloads/file')
install.packages("shinyjs", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("shinyBS", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("RMySQL", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp('Downloads/file')
install.packages("V8", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp('Downloads/file')
rm(list=ls())
data = read.table("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_pairwise/Pairwise/weight/fulldata.raw", sep="\t", header=T)
data[0,]
id1 <- unique(data$usernumber)
id2 <- data$usernumber[data$count==data$totcount]
idtemp <- which(id1[1:length(id2)]!=id2)[1]
data$count[data$usernumber==id1[idtemp]]
data$totcount[data$usernumber==id1[idtemp]]
data$totcount[data$usernumber==id1[idtemp]]=1
runApp('Downloads/file')
clear
library(ROCR)
library(RColorBrewer)
# function: inverse of link function
invg <- function(x, link = "logit"){
if (link == "logit") exp(x)/(1+exp(x))
else if (link == "log") exp(x)
else if (link == "identity") x
}
# function: link function
g <- function(x, link = "logit"){
if (link == "logit") log(x/(1-x))
else if (link == "log") log(x)
else if (link == "identity") x
}
# function: auc of the performance
auc <- function(pred,true){
pr=prediction(pred,true)
auc = performance(pr, measure = "auc")
auc = auc@y.values[[1]]
return(auc)
}
# function: generate data
Gendata = function(n,beta,gamma,alpha,A, roc = F, LINK = "logit"){
Z = rnorm(n)
W = rnorm(n, mean = 0.5*Z)
p = invg(alpha + beta*Z + gamma*W, link = LINK)
p = ifelse(p < 0,0.0001,ifelse(p>1,0.9999,p))
#True disease statusn
D = rbinom(n,1,p)
#Phenotyping Variance
V <- runif(n,0.01,0.05)
lpstar = apply(cbind(D,V),1,function(x){rnorm(1,mean = (mean(g(p, link = LINK)) + A*x[1] - A*(1-x[1])), sd = sqrt(x[2]))})
# check AUC corresponding to A
if (roc) print(paste("AUC =",round(auc(lpstar,D),3))) # A = 0.05, AUC = 0.674; A = 0.10, AUC = 0.797; A = 0.20, AUC = 0.947
# A = 0.09, AUC = 0.75
# A = 0.13, AUC = 0.856
# A = 0.20, AUC = 0.947
pstar = invg(lpstar, link = LINK)
pstar = ifelse(pstar < 0,0.0001,ifelse(pstar>1,0.9999,pstar))
# cutoff for dichotomization
prev = sum(pstar)
cutoff = quantile(pstar,probs = mean(1-pstar))
# dichotomization
hatY =  1*(pstar>cutoff)
return(list(hatY,D,pstar,Z,W,V))
}
sim = function(n,alpha,beta,gamma,A,roc = F, L = "logit"){
Data = Gendata(n,beta,gamma,alpha,A,roc = F, LINK = L)
hatY = Data[[1]]
D = Data[[2]]
pstar = Data[[3]]
Z = Data[[4]]
W = Data[[5]]
V = Data[[6]]
data = data.frame(hatY,D,pstar,Z,W,V)
# set family based on link
if (L == "logit") fam = "binomial"
else if (L == "log") fam = "poisson"
else if (L == "identity") fam = "gaussian"
#regress true disease status on Z and W
fit1 = glm(D~Z + W, data = data, family = fam)
beta1 = summary(fit1)$coefficients[,1]
varbeta1 = summary(fit1)$coefficients[,2]^2
#regress dichotomized predicted probability on Z and W
fit2 = glm(hatY~Z + W, data = data, family = fam)
beta2 = summary(fit2)$coefficients[,1]
varbeta2 = summary(fit2)$coefficients[,2]^2
#Sinnott transformation based on estimated probability in cases and controls
fitp = lm(pstar~Z + W,data = data)
muhat1 = mean(pstar[hatY == 1])
muhat0 = mean(pstar[hatY == 0])
beta3 = fitp$coef/(muhat1 - muhat0)
#Sinnott transformation based on true probability in cases and controls
mu1 = mean(pstar[D == 1])
mu0 = mean(pstar[D == 0])
beta4 = fitp$coef/(mu1 - mu0)
if (L == "log"){# need to account for factor of 1/x_0 in Taylor series expansion of ln around x0
beta3 <- beta3/mean(hatY)
beta4 <- beta4/mean(hatY)
}
return(c(beta1[2],beta2[2],beta3[2],beta4[2]))
}
#run simulation for identity link function
nsim = 1000
n = 10000
#######################################################
# for log link function
A = c(0.09,0.13,0.2)
beta = c(0.1,0.5,0.8)
# repeat simulations using log link function
logBIAS = list()
#######################################################
# for log link function
A = c(0.09,0.13,0.2)
beta = c(0.1,0.5,0.8)
# repeat simulations using log link function
logBIAS = list()
logUBIAS = list()
logLBIAS = list()
logVAR = list()
set.seed(102840)
for (i in 1:length(A)){
logBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
logUBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
logLBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
for (j in 1:length(beta)){
out = replicate(nsim,sim(n,alpha = log(0.1),beta = beta[j],gamma = 0.05,A= A[i],roc = F, L = "log"),simplify = "array")
beta1 = out[1,]
beta2 = out[2,]
beta3 = out[3,]
beta4 = out[4,]
meanbeta1 = mean(beta1,na.rm=TRUE)
meanbeta2 = mean(beta2,na.rm=TRUE)
meanbeta3 = mean(beta3,na.rm=TRUE)
meanbeta4 = mean(beta4,na.rm=TRUE)
lvar1 = var(beta1,na.rm = TRUE)
lvar2 = var(beta2,na.rm = TRUE)
lvar3 = var(beta3,na.rm = TRUE)
lvar4 = var(beta3,na.rm = TRUE)
bias1 = meanbeta1-beta[j]
bias2 = meanbeta2-beta[j]
bias3 = meanbeta3-beta[j]
bias4 = meanbeta4-beta[j]
ubias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.975)
ubias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.975)
ubias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.975)
ubias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.975)
lbias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.025)
lbias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.025)
lbias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.025)
lbias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.025)
logBIAS[[i]][j,] = c(bias1,bias2,bias3,bias4)
logUBIAS[[i]][j,] = c(ubias1,ubias2,ubias3,ubias4)
logLBIAS[[i]][j,] = c(lbias1,lbias2,lbias3,lbias4)
logVAR[[i]][j,] = c(lvar1,lvar2,lvar3,lvar4)
}
}
# repeat simulations using log link function
logBIAS = list()
logUBIAS = list()
logLBIAS = list()
logVAR = list()
set.seed(102840)
for (i in 1:length(A)){
logBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
logUBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
logLBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
for (j in 1:length(beta)){
out = replicate(nsim,sim(n,alpha = log(0.1),beta = beta[j],gamma = 0.05,A= A[i],roc = F, L = "log"),simplify = "array")
beta1 = out[1,]
beta2 = out[2,]
beta3 = out[3,]
beta4 = out[4,]
meanbeta1 = mean(beta1,na.rm=TRUE)
meanbeta2 = mean(beta2,na.rm=TRUE)
meanbeta3 = mean(beta3,na.rm=TRUE)
meanbeta4 = mean(beta4,na.rm=TRUE)
lvar1 = var(beta1,na.rm = TRUE)
lvar2 = var(beta2,na.rm = TRUE)
lvar3 = var(beta3,na.rm = TRUE)
lvar4 = var(beta3,na.rm = TRUE)
bias1 = meanbeta1-beta[j]
bias2 = meanbeta2-beta[j]
bias3 = meanbeta3-beta[j]
bias4 = meanbeta4-beta[j]
ubias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.975)
ubias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.975)
ubias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.975)
ubias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.975)
lbias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.025)
lbias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.025)
lbias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.025)
lbias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.025)
logBIAS[[i]][j,] = c(bias1,bias2,bias3,bias4)
logUBIAS[[i]][j,] = c(ubias1,ubias2,ubias3,ubias4)
logLBIAS[[i]][j,] = c(lbias1,lbias2,lbias3,lbias4)
# logVAR[[i]][j,] = c(lvar1,lvar2,lvar3,lvar4)
}
}
# Create one plot for each value of A with separate bars for each value of beta
xbeta = rep(c(seq(1,4),""), 3)[-15]
betalab = beta
auclab = round(c(pnorm(A[1]*sqrt(2)/(sqrt(0.03))),pnorm(A[2]*sqrt(2)/(sqrt(0.03))),pnorm(A[3]*sqrt(2)/(sqrt(0.03)))),2)
colors = brewer.pal(4, "Dark2")
par (mfrow = c(2,2))
for (i in 1:3){
# true outcome
plot(seq(1,15,by = 5), logBIAS[[i]][,1],
ylim=range(c(logLBIAS), c(logUBIAS)), xlim = c(0,15),
pch=19, ylab="Bias", xaxt = "n",
main=paste("AUC =",auclab[i]), xlab = "", col = colors[1])
arrows(seq(1,15,by = 5), logLBIAS[[i]][,1], seq(1,15,by = 5), logUBIAS[[i]][,1], length=0.05, angle=90, code=3, col = colors[1])
# dichotomized phenotype
points(seq(2,15,by = 5), logBIAS[[i]][,2],pch=19, col = colors[2])
arrows(seq(2,15,by = 5), logLBIAS[[i]][,2], seq(2,15,by = 5), logUBIAS[[i]][,2], length=0.05, angle=90, code=3, col = colors[2])
# imperfect correction to phenotype probability
points(seq(3,15,by = 5), logBIAS[[i]][,3],pch=19, col = colors[3])
arrows(seq(3,15,by = 5), logLBIAS[[i]][,3], seq(3,15,by = 5), logUBIAS[[i]][,3], length=0.05, angle=90, code=3, col = colors[3])
# true correction to phenotype probability
points(seq(4,15,by = 5), logBIAS[[i]][,4],pch=19, col = colors[4])
arrows(seq(4,15,by = 5), logLBIAS[[i]][,4], seq(4,15,by = 5), logUBIAS[[i]][,4], length=0.05, angle=90, code=3, col = colors[4])
abline(h = 0)
axis(1,at = seq(1,14),labels = xbeta, cex.axis = 0.8)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[1])),side = 1, line = 2, at = 2.5)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[2])),side = 1, line = 2, at = 7.5)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[3])),side = 1, line = 2, at = 12.5)
}
save.image("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_AIM2/sim_result/log_0.1.Rdata")
# repeat simulations using log link function
logBIAS = list()
logUBIAS = list()
logLBIAS = list()
logVAR = list()
set.seed(102840)
for (i in 1:length(A)){
logBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
logUBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
logLBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
for (j in 1:length(beta)){
out = replicate(nsim,sim(n,alpha = log(0.2),beta = beta[j],gamma = 0.05,A= A[i],roc = F, L = "log"),simplify = "array")
beta1 = out[1,]
beta2 = out[2,]
beta3 = out[3,]
beta4 = out[4,]
meanbeta1 = mean(beta1,na.rm=TRUE)
meanbeta2 = mean(beta2,na.rm=TRUE)
meanbeta3 = mean(beta3,na.rm=TRUE)
meanbeta4 = mean(beta4,na.rm=TRUE)
lvar1 = var(beta1,na.rm = TRUE)
lvar2 = var(beta2,na.rm = TRUE)
lvar3 = var(beta3,na.rm = TRUE)
lvar4 = var(beta3,na.rm = TRUE)
bias1 = meanbeta1-beta[j]
bias2 = meanbeta2-beta[j]
bias3 = meanbeta3-beta[j]
bias4 = meanbeta4-beta[j]
ubias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.975)
ubias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.975)
ubias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.975)
ubias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.975)
lbias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.025)
lbias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.025)
lbias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.025)
lbias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.025)
logBIAS[[i]][j,] = c(bias1,bias2,bias3,bias4)
logUBIAS[[i]][j,] = c(ubias1,ubias2,ubias3,ubias4)
logLBIAS[[i]][j,] = c(lbias1,lbias2,lbias3,lbias4)
# logVAR[[i]][j,] = c(lvar1,lvar2,lvar3,lvar4)
}
}
# Create one plot for each value of A with separate bars for each value of beta
xbeta = rep(c(seq(1,4),""), 3)[-15]
betalab = beta
auclab = round(c(pnorm(A[1]*sqrt(2)/(sqrt(0.03))),pnorm(A[2]*sqrt(2)/(sqrt(0.03))),pnorm(A[3]*sqrt(2)/(sqrt(0.03)))),2)
colors = brewer.pal(4, "Dark2")
par (mfrow = c(2,2))
for (i in 1:3){
# true outcome
plot(seq(1,15,by = 5), logBIAS[[i]][,1],
ylim=range(c(logLBIAS), c(logUBIAS)), xlim = c(0,15),
pch=19, ylab="Bias", xaxt = "n",
main=paste("AUC =",auclab[i]), xlab = "", col = colors[1])
arrows(seq(1,15,by = 5), logLBIAS[[i]][,1], seq(1,15,by = 5), logUBIAS[[i]][,1], length=0.05, angle=90, code=3, col = colors[1])
# dichotomized phenotype
points(seq(2,15,by = 5), logBIAS[[i]][,2],pch=19, col = colors[2])
arrows(seq(2,15,by = 5), logLBIAS[[i]][,2], seq(2,15,by = 5), logUBIAS[[i]][,2], length=0.05, angle=90, code=3, col = colors[2])
# imperfect correction to phenotype probability
points(seq(3,15,by = 5), logBIAS[[i]][,3],pch=19, col = colors[3])
arrows(seq(3,15,by = 5), logLBIAS[[i]][,3], seq(3,15,by = 5), logUBIAS[[i]][,3], length=0.05, angle=90, code=3, col = colors[3])
# true correction to phenotype probability
points(seq(4,15,by = 5), logBIAS[[i]][,4],pch=19, col = colors[4])
arrows(seq(4,15,by = 5), logLBIAS[[i]][,4], seq(4,15,by = 5), logUBIAS[[i]][,4], length=0.05, angle=90, code=3, col = colors[4])
abline(h = 0)
axis(1,at = seq(1,14),labels = xbeta, cex.axis = 0.8)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[1])),side = 1, line = 2, at = 2.5)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[2])),side = 1, line = 2, at = 7.5)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[3])),side = 1, line = 2, at = 12.5)
}
save.image("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_AIM2/sim_result/log_0.2.Rdata")
# repeat simulations using log link function
logBIAS = list()
logUBIAS = list()
logLBIAS = list()
logVAR = list()
set.seed(102840)
for (i in 1:length(A)){
logBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
logUBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
logLBIAS[[i]] <- matrix(ncol = 4, nrow = length(beta))
for (j in 1:length(beta)){
out = replicate(nsim,sim(n,alpha = log(0.5),beta = beta[j],gamma = 0.05,A= A[i],roc = F, L = "log"),simplify = "array")
beta1 = out[1,]
beta2 = out[2,]
beta3 = out[3,]
beta4 = out[4,]
meanbeta1 = mean(beta1,na.rm=TRUE)
meanbeta2 = mean(beta2,na.rm=TRUE)
meanbeta3 = mean(beta3,na.rm=TRUE)
meanbeta4 = mean(beta4,na.rm=TRUE)
lvar1 = var(beta1,na.rm = TRUE)
lvar2 = var(beta2,na.rm = TRUE)
lvar3 = var(beta3,na.rm = TRUE)
lvar4 = var(beta3,na.rm = TRUE)
bias1 = meanbeta1-beta[j]
bias2 = meanbeta2-beta[j]
bias3 = meanbeta3-beta[j]
bias4 = meanbeta4-beta[j]
ubias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.975)
ubias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.975)
ubias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.975)
ubias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.975)
lbias1 = quantile(beta1 - beta[j],na.rm=TRUE, probs = 0.025)
lbias2 = quantile(beta2 - beta[j],na.rm=TRUE, probs = 0.025)
lbias3 = quantile(beta3 - beta[j],na.rm=TRUE, probs = 0.025)
lbias4 = quantile(beta4 - beta[j],na.rm=TRUE, probs = 0.025)
logBIAS[[i]][j,] = c(bias1,bias2,bias3,bias4)
logUBIAS[[i]][j,] = c(ubias1,ubias2,ubias3,ubias4)
logLBIAS[[i]][j,] = c(lbias1,lbias2,lbias3,lbias4)
# logVAR[[i]][j,] = c(lvar1,lvar2,lvar3,lvar4)
}
}
# Create one plot for each value of A with separate bars for each value of beta
xbeta = rep(c(seq(1,4),""), 3)[-15]
betalab = beta
auclab = round(c(pnorm(A[1]*sqrt(2)/(sqrt(0.03))),pnorm(A[2]*sqrt(2)/(sqrt(0.03))),pnorm(A[3]*sqrt(2)/(sqrt(0.03)))),2)
colors = brewer.pal(4, "Dark2")
par (mfrow = c(2,2))
for (i in 1:3){
# true outcome
plot(seq(1,15,by = 5), logBIAS[[i]][,1],
ylim=range(c(logLBIAS), c(logUBIAS)), xlim = c(0,15),
pch=19, ylab="Bias", xaxt = "n",
main=paste("AUC =",auclab[i]), xlab = "", col = colors[1])
arrows(seq(1,15,by = 5), logLBIAS[[i]][,1], seq(1,15,by = 5), logUBIAS[[i]][,1], length=0.05, angle=90, code=3, col = colors[1])
# dichotomized phenotype
points(seq(2,15,by = 5), logBIAS[[i]][,2],pch=19, col = colors[2])
arrows(seq(2,15,by = 5), logLBIAS[[i]][,2], seq(2,15,by = 5), logUBIAS[[i]][,2], length=0.05, angle=90, code=3, col = colors[2])
# imperfect correction to phenotype probability
points(seq(3,15,by = 5), logBIAS[[i]][,3],pch=19, col = colors[3])
arrows(seq(3,15,by = 5), logLBIAS[[i]][,3], seq(3,15,by = 5), logUBIAS[[i]][,3], length=0.05, angle=90, code=3, col = colors[3])
# true correction to phenotype probability
points(seq(4,15,by = 5), logBIAS[[i]][,4],pch=19, col = colors[4])
arrows(seq(4,15,by = 5), logLBIAS[[i]][,4], seq(4,15,by = 5), logUBIAS[[i]][,4], length=0.05, angle=90, code=3, col = colors[4])
abline(h = 0)
axis(1,at = seq(1,14),labels = xbeta, cex.axis = 0.8)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[1])),side = 1, line = 2, at = 2.5)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[2])),side = 1, line = 2, at = 7.5)
mtext(substitute(paste(beta,"=",nn), list(nn = betalab[3])),side = 1, line = 2, at = 12.5)
}
save.image("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_AIM2/sim_result/log_0.5.Rdata")
a <- c(1,0,1,1,1,1,1,1,0)
hist(a)
barplot(a)
barplot(summary(a))
a
table(a)
barplot(table(a))
barplot(table(a),xlab=("Female","Male"))
barplot(table(a),xlab=c("Female","Male"))
barplot(table(a),names.arg =c("Female","Male"))
####### plot histogram
mfrow = c(2,2)
shiny::runApp('Desktop')
runApp('Desktop')
library(RPostgres)
install.packages("RPostgres", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("DBI", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("digest", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("lubridate", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/66ee42627840c2a70b3fbff73455098a/Message/MessageTemp/7072feada67343d3e2524bad9339b8da/File')
runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/66ee42627840c2a70b3fbff73455098a/Message/MessageTemp/7072feada67343d3e2524bad9339b8da/File')
runApp('Desktop/000_UPenn_Research/000_project/000_Xmeta/dashboard_zixuan')
runApp('Desktop/000_UPenn_Research/000_project/000_Xmeta/dashboard_zixuan')
runApp('Desktop/000_UPenn_Research/000_project/000_Xmeta/dashboard_zixuan')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Desktop/text.R')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Downloads/file')
runApp('Desktop')
runApp('Downloads/file')
runApp('Downloads/file')
shiny::runApp('~/Downloads/file')
runApp('~/Downloads/file')
runApp()
runApp()
runApp()
runApp('~/Downloads/file')
runApp()
runApp()
runApp()
par.est <- c(-0.145, -0.011, 0.010 , 0.076, -0.461, -0.457,-0.269)
par.ase <- c(0.321, 0.024, 0.005, 0.010, 0.222, 0.314, 0.322)
round((1-pnorm(abs(par.est/par.ase),0,1))*2,3)
shiny::runApp()
